#include <WiFi.h>
#include <WebServer.h>

#define NETWORK_SSID "slmrnkyl"
#define NETWORK_PASS "salmorin0816"

const int lampPins[] = {4, 16, 17, 5, 18};
const int totalLamps = sizeof(lampPins) / sizeof(lampPins[0]);

WebServer server(80);

struct LampState {
    bool toggleMode = false;
    bool modeA = true;
    unsigned long lastToggle = 0;
    const unsigned long toggleInterval = 300;

    bool sequenceActive = false;
    unsigned long lastSequence = 0;
    const unsigned long sequenceInterval = 300;
    int step = 0;
    int direction = 1;
    const int sequenceOrder[5] = {14, 27, 26, 25, 33};
} lampControl;

void setupWiFi() {
    WiFi.begin(NETWORK_SSID, NETWORK_PASS);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi: " + WiFi.localIP().toString());
}

void setupLamps() {
    for (int pin : lampPins) {
        pinMode(pin, OUTPUT);
        digitalWrite(pin, LOW);
    }
}

void controlLamps(int state) {
    for (int pin : lampPins) {
        digitalWrite(pin, state);
    }
}

void handleRoot() {
    server.send(200, "text/html", "<!DOCTYPE html><html><head><title>ESP32 Lamp Control</title></head><body>"
                                "<h1>ESP32 Lamp Control</h1>"
                                "<button onclick=\"fetch('/off')\">Turn OFF</button><br>"
                                "<button onclick=\"fetch('/on')\">Turn ON</button><br>"
                                "<button onclick=\"fetch('/toggle')\">Toggle</button><br>"
                                "<button onclick=\"fetch('/sequence')\">Sequence</button><br>"
                                "</body></html>");
}

void handleOff() {
    lampControl.toggleMode = false;
    lampControl.sequenceActive = false;
    controlLamps(LOW);
    server.send(200, "text/plain", "Lamps OFF");
}

void handleOn() {
    lampControl.toggleMode = false;
    lampControl.sequenceActive = false;
    controlLamps(HIGH);
    server.send(200, "text/plain", "Lamps ON");
}

void handleToggle() {
    lampControl.toggleMode = true;
    lampControl.sequenceActive = false;
    lampControl.lastToggle = millis();
    lampControl.modeA = true;
    server.send(200, "text/plain", "Toggle Mode ON");
}

void handleSequence() {
    lampControl.sequenceActive = true;
    lampControl.toggleMode = false;
    lampControl.lastSequence = millis();
    lampControl.step = 0;
    lampControl.direction = 1;
    server.send(200, "text/plain", "Sequence Mode ON");
}

void setup() {
    Serial.begin(115200);
    setupWiFi();
    setupLamps();
    
    server.on("/", handleRoot);
    server.on("/off", handleOff);
    server.on("/on", handleOn);
    server.on("/toggle", handleToggle);
    server.on("/sequence", handleSequence);
    
    server.begin();
    Serial.println("Server Started");
}

void loop() {
    server.handleClient();
    unsigned long currentTime = millis();
    
    if (lampControl.toggleMode && (currentTime - lampControl.lastToggle >= lampControl.toggleInterval)) {
        lampControl.lastToggle = currentTime;
        for (int i = 0; i < totalLamps; i++) {
            digitalWrite(lampPins[i], (lampControl.modeA ? (i % 2 == 0) : (i % 2 != 0)) ? HIGH : LOW);
        }
        lampControl.modeA = !lampControl.modeA;
    }
    
    if (lampControl.sequenceActive && (currentTime - lampControl.lastSequence >= lampControl.sequenceInterval)) {
        lampControl.lastSequence = currentTime;
        controlLamps(LOW);
        digitalWrite(lampControl.sequenceOrder[lampControl.step], HIGH);
        lampControl.step += lampControl.direction;
        if (lampControl.step == 4 || lampControl.step == 0) {
            lampControl.direction *= -1;
        }
    }
}
